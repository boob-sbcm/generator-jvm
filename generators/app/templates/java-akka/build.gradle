buildscript {
  ext {
    javaVersion = '1.8'
    akkaVersion = '2.5.9'
    vavrVersion = '0.9.2'
    slf4jVersion = '1.7.25'
    jgivenVersion = '0.15.3'
    logbackVersion = '1.2.3'
    lombokVersion = '1.16.20'
    scalaCompatVersion = '2.12'
    junitJupiterVersion = '5.2.0'
    junitPlatformVersion = '1.2.0'
    junit4Version = '4.12'
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
  }
}

plugins {
  id 'idea'
  id 'java'
  id 'maven'
  id 'eclipse'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '2.0.2'
  id 'com.avast.gradle.docker-compose' version '0.6.13'
  id 'org.asciidoctor.convert' version '1.5.7' apply false
  id 'org.ajoberstar.git-publish' version '0.3.0' apply false
}

apply plugin: 'org.junit.platform.gradle.plugin'

group = 'com.github.daggerok'
version = '0.0.1'
sourceCompatibility = targetCompatibility = "$javaVersion"

mainClassName = 'daggerok.App'
shadowJar.mustRunAfter jar

defaultTasks 'clean', 'build'

repositories {
  mavenLocal()
  mavenCentral()
}

compileJava.dependsOn(processResources)

dependencies {

  implementation "com.typesafe.akka:akka-actor_$scalaCompatVersion:$akkaVersion"

  implementation "io.vavr:vavr:$vavrVersion"

  implementation "org.slf4j:slf4j-api:$slf4jVersion"
  // implementation "org.slf4j:slf4j-jdk14:$slf4jVersion"
  implementation "org.slf4j:jul-to-slf4j:$slf4jVersion"
  implementation "org.slf4j:log4j-over-slf4j:$slf4jVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"

  compileOnly "org.projectlombok:lombok:$lombokVersion"
  testCompileOnly "org.projectlombok:lombok:$lombokVersion"

  // junit 4
  testImplementation "junit:junit:$junit4Version"
  // junit 5
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
  // hamcrest asserts, like: assertThat
  testImplementation "org.hamcrest:hamcrest-core:1.3"

  testRuntime "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
  testRuntime "org.junit.vintage:junit-vintage-engine:4.12.3"
  // IDEA (older bundle):
  testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
  testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
}

//apply from: "$rootDir/gradle/findbugs.gradle"

def profile = project.hasProperty('profile') ? project.getProperty('profile') : 'gradle'

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = 'Local'
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

wrapper {
  gradleVersion = '4.8'
  distributionType = 'BIN'
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}
