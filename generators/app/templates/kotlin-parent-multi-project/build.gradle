buildscript {
  ext {
    javaVersion = "1.8"
    vavrVersion = "0.9.2"
    slf4jVersion = "1.7.25"
    kotlinVersion = "1.2.31"
    lombokVersion = "1.16.20"
    junitJupiterVersion = "5.0.2"
    junitPlatformVersion = "1.0.2"
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath("org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion")
  }
}

plugins {
  id "idea"
  id "eclipse"
  id "com.avast.gradle.docker-compose" version "0.6.13"
  id "org.jetbrains.kotlin.jvm" version "1.2.31" apply false
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.31" apply false
  id "org.jetbrains.kotlin.plugin.spring" version "1.2.31" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.31" apply false
  id "io.spring.dependency-management" version "1.0.5.RELEASE" apply false
  id "com.github.johnrengelman.shadow" version "2.0.2" apply false
}

allprojects {

  apply plugin: "base"
  apply plugin: "maven"

  group = "daggerok"
  version = "0.0.1"

  defaultTasks "clean", "build"
}

/*//executable sub-project build.gradle:
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"

mainClassName = "daggerok.AppKt"
shadowJar.mustRunAfter jar
*/

subprojects {

  apply plugin: "java"

  sourceCompatibility = targetCompatibility = "$javaVersion"

  apply plugin: "io.spring.dependency-management"

  /*
  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
  }
  */

  apply plugin: "kotlin"
  apply plugin: "org.jetbrains.kotlin.plugin.noarg"
  apply plugin: "org.jetbrains.kotlin.plugin.spring"
  apply plugin: "org.jetbrains.kotlin.plugin.allopen"

  compileKotlin {
    incremental = true
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = "$javaVersion"
    }
  }

  compileTestKotlin {
    incremental = true
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = "$javaVersion"
    }
  }

  apply plugin: "org.junit.platform.gradle.plugin"

  test {
    systemProperties "property": "value"
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  compileJava.dependsOn(processResources)

  dependencies {

    // In java we trust...
    compile("io.vavr:vavr:$vavrVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    //compileOnly("org.projectlombok:lombok:$lombokVersion")
    //testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    // compile("org.slf4j:slf4j-jdk14:$slf4jVersion")
    compile("org.slf4j:jul-to-slf4j:$slf4jVersion")
    compile("org.slf4j:log4j-over-slf4j:$slf4jVersion")
    compile("ch.qos.logback:logback-classic:1.2.3")

    // Kotlin
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    testCompile("org.jetbrains.kotlin:kotlin-junit-test:$kotlinVersion")
    testCompile("junit:junit:4.12")
    // junit 5
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    // hamcrest asserts, like: assertThat
    testImplementation("org.hamcrest:hamcrest-core:1.3")

    testRuntime("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.3")
    // IDEA (older bundle):
    testRuntime("org.junit.platform:junit-platform-launcher:$junitPlatformVersion")
    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
  }
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "gradle"

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

task wrapper(type: Wrapper) {
  gradleVersion = "4.6"
  distributionType = "ALL"
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}
