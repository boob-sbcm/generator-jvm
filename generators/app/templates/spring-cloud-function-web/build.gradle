buildscript {
  ext {
    javaVersion = "1.8"
    kotlinVersion = "1.2.41"
    springCloudVersion = "Finchley.M9"
    springBootVersion = "2.0.1.RELEASE"
    springCloudFunctionVersion = "1.0.0.M3"
  }
}

plugins {
  id "idea"
  id "java"
  id "maven"
  id "eclipse"
  id "org.jetbrains.kotlin.jvm" version "1.2.41"
  id "org.springframework.boot" version "2.0.1.RELEASE"
  id "com.avast.gradle.docker-compose" version "0.6.13"
  id "org.jetbrains.kotlin.plugin.spring" version "1.2.41"
  id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

group = "daggerok"
version = "0.0.1"
sourceCompatibility = targetCompatibility = "$javaVersion"

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

defaultTasks "clean", "build"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {

  compile("org.springframework.cloud:spring-cloud-function-web:$springCloudFunctionVersion")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5")
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
  //compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
  //annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
  //// In java we trust...
  //compile("io.vavr:vavr:$vavrVersion")
  //annotationProcessor("org.projectlombok:lombok")
  //compileOnly("org.projectlombok:lombok")
  //testAnnotationProcessor("org.projectlombok:lombok")
  //testCompileOnly("org.projectlombok:lombok")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
  }
}

bootJar {
  launchScript()
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "gradle"

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

task wrapper(type: Wrapper) {
  gradleVersion = "4.7"
  distributionType = "ALL"
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}

/*
// spring-boot multi-module preamble:
// this in dependencies closure really doesn't work:
// compile project(":submodule").sourceSets.main.output // dot't do this!

// 1. in spring-boot submodules use next configs:

bootJar {
  enabled = false
}
jar {
  enabled = true
}

// 2. in spring-boot target main module to fix gradle compile build + lombok issue use all of these:

dependencies {
  annotationProcessor(project(":submodule"))
  compileOnly(project(":submodule"))
  compile(project(":submodule"))
}
*/
